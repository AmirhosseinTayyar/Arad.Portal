@using Arad.Portal.DataLayer.Models.SlideModule;
@using Serilog;
@model Arad.Portal.DataLayer.Entities.General.SliderModule.Slider
@{
    int i = 1;
    Log.Fatal($"Find defauil.cshtml for slider model.slides count ={Model.Slides.Count}");
}

<div class="carousel slide" id="sliderCarousel" data-bs-ride="carousel">
    @if (Model != null)
    {
      
        <div class="carousel-inner">
            @foreach (var slide in Model.Slides)
            {
                if (slide.IsActive)
                {
                    var itemBackground = string.IsNullOrEmpty(slide.ColoredBackground) ? "transparent" : slide.ColoredBackground;

                    if (string.IsNullOrWhiteSpace(slide.Link))
                    {
                        <div class='carousel-item @(i == 1 ? "active" : "")' 
                        style="background-color: @itemBackground;position: relative; z-index:0;">
                            <img data-animation="animated @($"{slide.TransActionType}")"
                             src="@Url.Content($"~/GetScaledImageOnWidth?path=/{slide.ImageUrl}&width={1000}")"
                             class="w-100" alt="@slide.Alt" title="@slide.Title"  />
                            @if (slide.Layers.Count > 0)
                            {
                                foreach (var layer in slide.Layers)
                                {
                                    @await Component.InvokeAsync("SliderLayer", layer)

                                }
                            }

                        </div>
                    }
                    else
                    {
                        <a href="@slide.Link" target="@slide.Target" class="carousel-item @(i == 1 ? "active" : "")" 
                               style="background-color: @itemBackground;position: relative; z-index:0;">
                            <img data-animation="animated @($"{slide.TransActionType}")"
                              src="@Url.Content($"~/GetScaledImageOnWidth?path=/{slide.ImageUrl}&width={1000}")" 
                               class="w-100" alt="@slide.Alt" title="@slide.Title"  />
                            @if (slide.Layers.Count > 0)
                            {
                                foreach (var layer in slide.Layers)
                                {
                                    @await Component.InvokeAsync("SliderLayer", layer)

                                }
                            }
                        </a>
                    }
                }
                i += 1;
            }
        </div>

        <button class="carousel-control-prev" type="button" data-bs-target="#sliderCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#sliderCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    }
</div>

<script on-content-loaded="true">
    $(document).ready(function(){
        console.log("default.cshtml in slider");
         var $myCarousel = $("#sliderCarousel");
                 if($myCarousel != undefined && $myCarousel.length > 0 )
                 {
                      $firstAnimatingElems = $myCarousel
                            .find(".carousel-item:first")
                            .find("[data-animation ^= 'animated']");

                        var carousel = new bootstrap.Carousel($myCarousel);
                        doAnimations($firstAnimatingElems);

                        var myCarousel = document.getElementById('sliderCarousel');
                        myCarousel.addEventListener("slide.bs.carousel", function (e) {
                            var $animatingElems = $(e.relatedTarget).find(
                                "[data-animation ^= 'animated']"
                            );
                            doAnimations($animatingElems);
                        });
                 }
    })
</script>

