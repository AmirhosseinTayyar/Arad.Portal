<!DOCTYPE html>
@using System.Globalization;
@using Arad.Portal.DataLayer.Models.DesignStructure
@using Arad.Portal.GeneralLibrary.Utilities;
@using HtmlAgilityPack
@using Newtonsoft.Json
@using System.Security.Claims

@inject Arad.Portal.UI.Shop.Helpers.LayoutContentProcess process
@inject Arad.Portal.DataLayer.Contracts.Shop.ShoppingCart.IShoppingCartRepository cartRepo
@{
    var direction = "";
    var langList = new List<string>() { "fa", "en" };
    string lang = "";
    if (CultureInfo.CurrentCulture.TextInfo.IsRightToLeft)
    {
        direction = "rtl";
        ViewBag.dir = "rtl";
    }
    else
    {
        direction = "ltr";
        ViewBag.dir = "ltr";
    }
    switch (CultureInfo.CurrentCulture.Name)
    {
        case "fa-IR":
            lang = "fa";
            break;
        case "en-US":
            lang = "en";
            break;
    }
    if(User.Identity.IsAuthenticated)
    {
        var res = await cartRepo.LoadUserCartShopping(User.Claims
                 .FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier).Value);
        ViewBag.BasketCount = res;
    }
}
<html dir="@direction" lang="@lang">
<head>
    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <meta content="Arad Portal" name="description">
    <title>@ViewData["Title"] - Arad.Portal.UI.Shop</title>
    <link href="~/lib/font-awesome/css/all.css" rel="stylesheet" />
    @if (direction == "ltr")
    {
        <link href="~/lib/bootstrap5/css/bootstrap.min.css" rel="stylesheet" />
    }
    else
    {
        <link href="~/lib/bootstrap5/css/bootstrap.rtl.min.css" rel="stylesheet" />
        <link href="~/Fonts/IranSans/css/fontiran.css" rel="stylesheet" />
    }
    <link rel="stylesheet" href="~/css/Menu/Bootstrap4MegaMenu.css" />
    <link href="~/lib/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />
    <link href="~/lib/owlCarousel/css/owl.carousel.min.css" rel="stylesheet" />
    <link href="~/lib/owlCarousel/css/owl.theme.default.min.css" rel="stylesheet" />
    <link href="~/lib/owlCarousel/css/CarouselCustomArrowKeys.css" rel="stylesheet" />
    <link href="~/css/SpecialProduct.css" rel="stylesheet" />
    <link href="~/css/siteTemplate/FirstContentTemplate.css" rel="stylesheet" />
    <link href="~/css/siteTemplate/ThirdContentTemplate.css" rel="stylesheet" />
    <link href="~/css/siteTemplate/ForthContentTemplate.css" rel="stylesheet" />
    <link href="~/css/siteTemplate/FifthContentTemplate.css" rel="stylesheet" />
    <link href="~/css/header.css" rel="stylesheet" />
    <link href = "~/lib/animate.css/animate.min.css" rel="stylesheet"/>
    @await RenderSectionAsync("Styles", required: false)

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap5/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/bootstrap-select/bootstrap-select.min.js"></script>
    <script src="~/lib/bootstrap-select/js/i18n/defaults-@(CultureInfo.CurrentCulture.Name.Replace('-', '_')).js"></script>
    <script src="~/lib/owlCarousel/js/owl.carousel.min.js"></script>
    @await RenderSectionAsync("Scripts", required: false)
</head>


<body>
    <div id="loading" class="text-center">
        <div class="spinner-border text-danger" style="width: 4rem; height: 4rem;" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <header class="container-fluid ps-0 pe-0" style=@(process.LayoutModel.HeaderPart != null && !string.IsNullOrWhiteSpace(process.LayoutModel.HeaderPart.CodeColor) ? $"background-color:{process.LayoutModel.HeaderPart.CodeColor}" : "")>
        <partial name="~/Views/Shared/_PriorFixedHeader.cshtml" />
        @if (process.LayoutModel.HasCustomizedHeader)
        {
            @if (!string.IsNullOrWhiteSpace(process.LayoutModel.HeaderPart.PriorFixedContent))
            {
                @Html.Raw(process.LayoutModel.HeaderPart.PriorFixedContent) ;
               

            }
            @if (process.LayoutModel.HeaderPart.CustomizedContent.Count > 0)
            {
                foreach (RowContent row in process.LayoutModel.HeaderPart.CustomizedContent.OrderBy(_ => _.RowNumber))
                {
                    <div class="row firstLevel @row.ExtraClassNames">
                        @foreach (ColContent column in row.ColsContent.OrderBy(_ => _.ColNumber))
                        {
                            <div class="@column.ColumnClassNames">
                                @{
                                    var htmlDoc = new HtmlDocument();
                                    htmlDoc.LoadHtml(column.ColData);
                                    var divs = htmlDoc.DocumentNode.Descendants("div");
                                    foreach (var div in divs)
                                    {
                                        if (div.Attributes["target"].Value == "module")
                                        {
                                            var module = JsonConvert
                                            .DeserializeObject<ModuleWithParametersValue>(column.ColData.Replace("<div target='module'>", "")
                                            .Replace("</div>", ""));
                                            switch (module.ModuleName)
                                            {
                                                case "ProductList":
                                                    @await Component.InvokeAsync("SpecialProduct",
                                                   new { productType = module.ParametersValue.ProductOrContentType,
                                                   selectionTemplate = module.ParametersValue.ProductTemplateDesign, count = module.ParametersValue.Count,
                                                   loadAnimation = module.ParametersValue.LoadAnimation, loadAnimationType = module.ParametersValue.LoadAnimationType });
                                                    break;
                                                case "ContentList":
                                                    @await Component.InvokeAsync("ContentTemplates", new { contentType = module.ParametersValue.ProductOrContentType,
                                                        selectionTemplate = module.ParametersValue.ContentTemplateDesign ,  count = module.ParametersValue.Count,
                                                        loadAnimation = module.ParametersValue.LoadAnimation, loadAnimationType = module.ParametersValue.LoadAnimationType });
                                                    break;
                                                case "HorizantalStoreMenu":
                                                    @await Component.InvokeAsync("StoreMenu");
                                                    break;
                                            }
                                        }
                                        else if (div.Attributes["target"].Value == "editor")
                                        {
                                            @Html.Raw(column.ColData.Replace("<div target=\"editor\">", "")
                .Replace("</div>", ""))
                                            ; ;
                                        }
                                    }
                                }
                            </div>
                        }
                    </div>
                }
            }
            @if (!string.IsNullOrWhiteSpace(process.LayoutModel.HeaderPart.LatterFixedContent))
            {
                @Html.Raw(process.LayoutModel.HeaderPart.LatterFixedContent);
               
            }
        }
        @*else
        {
            <div class="navbarMenu">
                @await Component.InvokeAsync("StoreMenu")
            </div>
        }*@

    </header>


    <div class="container">

        <div class="position-fixed left-50 top-0 p-5" id="toastPanel" style="z-index: 11;">
            <div aria-atomic="true" aria-live="assertive" class="toast" id="mainToast" role="alert" autohide="false">
                @* width: calc(100% - 400px);top: 40%; left: 200px;position: absolute;*@
                <div class="toast-body p-3 fs-5 rounded-3 text-center" id="mainToastBody">
                </div>
            </div>
        </div>
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>
    <footer>
        <div class="footer" style=@(process.LayoutModel.FooterPart != null && !string.IsNullOrWhiteSpace(process.LayoutModel.FooterPart.CodeColor) ? $"background-color:{process.LayoutModel.FooterPart.CodeColor}" : "")>
            @if (process.LayoutModel.HasCustomizedFooter)
            {
                @if (!string.IsNullOrWhiteSpace(process.LayoutModel.FooterPart.PriorFixedContent))
                {
                    @Html.Raw(process.LayoutModel.FooterPart.PriorFixedContent);
                }
                @if (process.LayoutModel.FooterPart.CustomizedContent.Count > 0)
                {
                    foreach (RowContent row in process.LayoutModel.FooterPart.CustomizedContent.OrderBy(_ => _.RowNumber))
                    {
                        <div class="row firstLevel @row.ExtraClassNames">
                            @foreach (ColContent column in row.ColsContent.OrderBy(_ => _.ColNumber))
                            {
                                <div class="@column.ColumnClassNames">
                                    @{
                                        var htmlDoc = new HtmlDocument();
                                        htmlDoc.LoadHtml(column.ColData);
                                        var divs = htmlDoc.DocumentNode.Descendants("div");
                                        foreach (var div in divs)
                                        {
                                            if (div.Attributes["target"].Value == "module")
                                            {
                                                var module = JsonConvert.DeserializeObject<ModuleWithParametersValue>(column.ColData.Replace("<div target='module'>", "")
                                                .Replace("</div>", ""));
                                                switch (module.ModuleName)
                                                {
                                                    case "ProductList":
                                                        @await Component.InvokeAsync("SpecialProduct",
                                                            new { productType = module.ParametersValue.ProductOrContentType,
                                                            selectionTemplate = module.ParametersValue.ProductTemplateDesign, count = module.ParametersValue.Count,
                                                            loadAnimation = module.ParametersValue.LoadAnimation, loadAnimationType = module.ParametersValue.LoadAnimationType} );
                                                        break;
                                                    case "ContentList":
                                                        @await Component.InvokeAsync("ContentTemplates", new { contentType = module.ParametersValue.ProductOrContentType,
                                                          selectionTemplate = module.ParametersValue.ContentTemplateDesign ,  count = module.ParametersValue.Count,
                                                          loadAnimation = module.ParametersValue.LoadAnimation, loadAnimationType = module.ParametersValue.LoadAnimationType});
                                                        break;
                                                    case "HorizantalStoreMenu":
                                                        @await Component.InvokeAsync("StoreMenu");
                                                        break;
                                                }
                                            }
                                            else if (div.Attributes["target"].Value == "editor")
                                            {
                                                @Html.Raw(column.ColData.Replace("<div target=\"editor\">", "").Replace("</div>", ""));
                                            }
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                }
                @if (!string.IsNullOrWhiteSpace(process.LayoutModel.HeaderPart.LatterFixedContent))
                {
                    @Html.Raw(process.LayoutModel.HeaderPart.LatterFixedContent);
                }
            }
            else
            {

            }
        </div>
    </footer>

    <script>
        function setLang(lang)
        {
            debugger;
            var currentCulture = '@CultureInfo.CurrentCulture.Name';
            if (currentCulture !== lang) {
                $.ajax({
                    type: "GET",
                    url: '/Account/changeLang?langId=' + lang,
                    success: function () {
                        debugger;
                        window.location.reload();
                    }
                });
            }
        }
        function setProductCountInCart(number) {
            debugger;
           $("span.count-basket").text(`${number} ${'@Language.GetString("Stuff")'}`);
        }

        function changeScreen() {
            var windowSize = $(window).width();
            console.log(windowSize);
            if (windowSize <= 974) {
                $(".nascr").removeClass("d-none").addClass("d-block");
                $(".wiscr").removeClass("d-block").addClass("d-none");
            } else {
                $(".nascr").removeClass("d-block").addClass("d-none");
                $(".wiscr").removeClass("d-none").addClass("d-block");
            }
        }
            $(document).ready(function () {
                changeScreen();
                $(window).resize(changeScreen);

                $(".menu-area").mouseover(function () {
                        var windowSize = $(window).width();
                        if (windowSize > 975) {
                            $(this).addClass("show");
                            $(this).find(".dropdown-toggle").addClass("text-primary");
                            $(this).find(".mega-area").addClass("show");
                        }
                });

                $(".menu-area").mouseleave(function () {
                    var windowSize = $(window).width();
                    if (windowSize > 975) {
                        $(this).removeClass("show");
                        $(this).find(".dropdown-toggle").removeClass("text-primary");
                        $(this).find(".mega-area").removeClass("show");
                    }
                });

                $(".nav-item .nav-link").mouseover(function () {
                        $(this).addClass("text-primary");
                });
                $(".nav-item .nav-link").mouseleave(function () {
                        $(this).removeClass("text-primary");
                });

                $(".custmDrp").click(function () {
                    debugger;
                    var item = $(this).parent().parent().siblings(".mega-area")
                    if (item.hasClass("show")) {
                        item.removeClass("show");
                    } else {
                        item.addClass("show");
                    }
                })
            });
    </script>
</body>
</html>

