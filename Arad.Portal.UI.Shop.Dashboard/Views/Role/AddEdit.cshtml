@model Arad.Portal.DataLayer.Models.Role.RoleDTO;
@{
    //Layout = "~/Views/Shared/_Layout.cshtml";
    var alert = Language.GetString("AlertAndMessage_GotIt");
    var error = Language.GetString("AlertAndMessage_Error");
    var dir = "";
    if (CultureInfo.CurrentCulture.TextInfo.IsRightToLeft)
    {
        dir = "rtl";
    }
    else
    {
        dir = "ltr";
    }
}


<link href="~/css/jquerysctipttop.css" rel="stylesheet" />
<script src="~/js/plugins/jquery/jquery.min.js"></script>
<link href="~/css/jqueryTreeview/jquery.treeview.css" rel="stylesheet" />
<script src="~/js/jqueryTreeview/jquery.treeview.js"></script>

<style>
    .text-danger {
        font-size: 12px;
    }
    p.group {
        padding-right: @(dir == "rtl" ? "3%" : "0%");

    }
    .treeview .item i{
        margin : 10px;
    }
</style>


<h4>  @Language.GetString("Menu_Permissions") </h4>
<hr />
<div class="row">
    <div class="col-md-12 col-12">
        <div class="card" id="addPermissionCard">
            <div class="card-header">
                <h5 class="card-title" data-toggle="tab">@(!string.IsNullOrWhiteSpace(Model.RoleId) ? Language.GetString("EditRolePart_Title") : Language.GetString("AddRolePart_Title"))</h5>
            </div>
            <form asp-controller="Role" role="form" asp-action="Save" id="addEditRoleFrm" method="post">
                <input type="hidden" value="@Model.RoleId" data-val="true" asp-for="@Model.RoleId">
                <div class="card-body" id="addEditPermissionCard">
                    <div class="row">
                        <div class="form-group col-md-4 col-12">

                            <label asp-for="RoleName">@Language.GetString("Role_Name")</label>
                            <input type="text" class="form-control" asp-for="RoleName" placeholder=" ">
                            <span data-val-result="RoleName" class="text-danger"></span>
                        </div>
                        <div class="form-group col-12 col-md-4">
                            <div class="row p-2">
                                <label asp-for="IsActive" class="form-label">@Language.GetString("ActivationState")</label>
                                <div class="form-check col-4">
                                    <input class="form-check-input" type="radio" asp-for="IsActive" value="true">
                                    <label class="form-check-label" asp-for="IsActive">
                                        @Language.GetString("Active")
                                    </label>
                                </div>
                                <div class="form-check col-12 col-md-4">
                                    <input class="form-check-input" type="radio" asp-for="IsActive" value="false">
                                    <label class="form-check-label" asp-for="IsActive">
                                        @Language.GetString("InActive")
                                    </label>
                                </div>
                                <span data-val-result="IsActive" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div id="permissionTreeView">

                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="row">
                        <div class="col-md-4 offset-md-8 col-12">
                            <a asp-action="List" class="btn btn-primary bg-gradient float-end m-2">@Language.GetString("btn_Back")</a>
                            <input type="submit" id="savebtn" value="@Language.GetString("btn_Save")" class="btn btn-success bg-gradient float-end m-2" />
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<div aria-hidden="true" aria-labelledby="confirmModalLabel" class="modal fade" id="confirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="confirmModalLabel">
                </h5>
                <button aria-label="Close" class="btn-close" data-bs-dismiss="modal" type="button">
                </button>
            </div>
            <div class="modal-body" id="confirmModalBody">
            </div>
            <div class="modal-footer">
                <button class="btn btn-success" onclick="onClickYes()" type="button">
                    @Language.GetString("btn_Confirm")
                </button>
                <button class="btn btn-secondary" data-bs-dismiss="modal" type="button">
                    @Language.GetString("btn_NotConfirm")
                </button>
            </div>
        </div>
    </div>
</div>

<div class="position-fixed h-100 w-100 p-5 bg-dark" id="toastAlert" style="display: block; left: 0; top: 0; z-index: 11;">
    <div aria-atomic="true" aria-live="assertive" class="toast" id="notificationToast" role="alert">
        <div class="toast-body p-3 fs-5 rounded-3 text-center" style="top: 40%; left: 200px;position: absolute;width: calc(100% - 400px);" id="notificationToastBody">
        </div>
    </div>
</div>

@await Component.InvokeAsync("ConfirmDelete", new ConfirmDeleteDTO { Url = Url.Action("Delete") })

@section Scripts
{

    <script>

                $(document).ready(function () {
                    debugger;
                    $("#toastAlert").hide();
                 $.ajax({
                     url: '@Url.Action("ListPermissions")' +"/"+"@Model.RoleId",
                     type: 'Get',
                     success: function (result) {
                         debugger;
                         var tw = new TreeView(
                             result,
                             { showAlwaysCheckBox: true, fold: false });
                         document.getElementById("permissionTreeView").appendChild(tw.root);
                     },
                     error: function (xhr, ajaxOptions, thrownError) {
                         alert(xhr.status);
                         alert(thrownError);
                     }
                 });

                 $("#addEditRoleFrm").submit(function (e) {
                        debugger;
                        e.preventDefault();
                            /* var form = $(this).serialize();*/
                        var myform = document.getElementById('addEditRoleFrm');
                            var form = new FormData(myform);
                            var PermissionIds = [];
                            $("#permissionTreeView span.item").each(function () {
                                var data = $(this).attr("check-value");
                                var num = parseInt(data);
                                if (num > 0) {
                                    PermissionIds.push($(this).attr("data-id"));
                                }
                            });
                    form.append('PermissionIds', PermissionIds);
                    form.append('IsActive', $("input[name='IsActive']:checked").val());
                    debugger;
                        $.ajax({
                            url: $(this).attr('action'),
                            data: form,
                            /* dataType : "json",*/
                            type: 'Post',
                            processData: false,
                            contentType:false,
                            /* contentType: "application/json; charset=utf-8",*/

                            beforeSend: function () {
                                debugger;
                                AddLoading($("#addEditPermissionCard"));
                            },
                            success: function (result) {
                                debugger;

                                if (result.status === "Success") {
                                    Swal.fire({
                                        icon: 'success',
                                        text: result.message,
                                        showConfirmButton: false,
                                        timer: 3000
                                    }).then(() => {
                                        window.location.href = '@Url.Action("List")';
                                    });
                                }else
                                if (result.status === "ModelError") {
                                    var spanErrorList = $('span[data-val-result]');
                                    if (spanErrorList.length > 1) {
                                        spanErrorList.each(function() {
                                            $(this).html("");
                                            $(this).parent().removeClass("has-error");
                                        });
                                    } else {
                                        spanErrorList.html("");
                                        spanErrorList.parent().removeClass("has-error");
                                    }

                                    if (result.modelStateErrors !== null) {
                                        result.modelStateErrors.forEach(function(value, index) {

                                            $('[data-val-result=' + value.key + ']').html(value.errorMessage);
                                            $('[data-val-result=' + value.key + ']').parent().addClass("has-error");
                                        });
                                    }
                                }
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                alert("@error");
                                alert(xhr.status);
                                alert(thrownError);
                            },
                            complete: function () {
                                removeLoading($("#addEditPermissionCard"));
                            }
                        });
                    });
                });
    </script>
}


