@using HtmlAgilityPack;
@using Newtonsoft.Json;
@using Arad.Portal.DataLayer.Models.DesignStructure;
@model Arad.Portal.DataLayer.Models.DesignStructure.ColContent
@{
    
    ModuleWithParametersValue module = new ModuleWithParametersValue();
    string contentType = "";
    string modulePartClass = "d-none";
    string editorPartClass = "d-none";
    bool isEdit = Model.ColData != null;
    if (!string.IsNullOrWhiteSpace(Model.ColData))
    {
        var htmlDoc = new HtmlDocument();
        var htmlRaw = "";
        htmlDoc.LoadHtml(Model.ColData);
        var divs = htmlDoc.DocumentNode.Elements("div");//divs in first level

        foreach (var div in divs) //surely it is one
        {
            if (div.Attributes["target"].Value == "module")
            {
                try
                {
                    module = JsonConvert
                      .DeserializeObject<ModuleWithParametersValue>(Model.ColData.Replace("<div target=\"module\">", "").Replace("</div>", ""));
                    contentType = "module";
                    modulePartClass = "";
                } catch(Exception ex)
                {

                }
            }
            else
            {
                htmlRaw = Model.ColData.Replace("<div target=\"editor\">", "").Replace("</div>", "");
                contentType = "editor";
                editorPartClass = "";
            }
        }
    }
}

<div class="row justify-content-center">
    <div class="offset-8 col-4 offset-md-10 col-md-2">
        <button class='btn btn-sm m-2 pt-2 btn-primary columnStyles float-end' data-bs-toggle="tooltip" data-bs-placement="top"
                title="@Language.GetString("design_ColumnStyles")" sec="@Model.Section" cn="@Model.ColNumber" guid="@Model.RowGuid" rn="@ViewBag.RowNumber">
            <i class='fs-6 fa fa-cog'></i>
        </button>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <label class="form-label">@Language.GetString("Template_ContentType")</label>
        <br />
        <select class="form-control selectpicker drpContentType" onchange="selectDrpContentType(this);"
                cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section" data-live-search="true" sel=@(contentType == "module" ? "1" :(contentType == "editor" ? "2" : "0")) >
            <option value="0" >@Language.GetString("AlertAndMessage_Choose")</option>
            <option value="1" >@Language.GetString("Template_SystemModules")</option>
            <option value="2" >@Language.GetString("Template_Editor")</option>
        </select>
    </div>
</div>

<div class="row parent" cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section" style="min-height:300px;">
    <div class="col-12 modulePart @modulePartClass" cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section">
        <select class="form-control selectpicker moduleList" cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section" sel="@module.ModuleId"
             data-live-search="true" asp-items="@(new SelectList(ViewBag.ModuleList,"Value","Text"))">
        </select>
        <br />
        <div class="d-flex justify-content-end">
            <button class="btn btn-success bg-gradient btn-sm float-end btnAddModule m-1" onclick="addModule(this);" cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section"
                    type="button">
                @Language.GetString("btn_Select")
            </button>
        </div>
        <br />
        <div class="paramsDiv" cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section">
            @{
                if(contentType == "module")
                {
                    switch(module.ModuleName)
                    {
                        case "ProductList":
                          <partial name="_ProductList.cshtml" model="@module"/>
                        break;
                         case "ContentList":
                          <partial name="_ContentList.cshtml" model="@module"/>
                        break;
                         case "HorizantalStoreMenu":
                          <partial name="_HorizantalStoreMenu.cshtml" model="@module"/>
                        break;
                         case "ImageTextSlider":
                          <partial name="_ImageTextSlider.cshtml" model="@module"/>
                        break;
                         case "LoginAndProfile":
                          <partial name="_LoginAndProfile.cshtml" model="@module"/>
                        break;
                         case "MultiLingualFlags":
                          <partial name="_MultiLingualFlags.cshtml" model="@module"/>
                        break;
                    }
                }
            }
        </div>
    </div>
    <div class="col-12 editorPart @editorPartClass"  cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section">
        <textarea id='@($"editor_{Model.ColNumber}_{ViewBag.RowNumber}")' name='@($"editor_{Model.ColNumber}_{ViewBag.RowNumber}")'  class="form-control txtEditorCK" rows="40">
            @{
                if (contentType != "" && contentType == "editor")
                {
                    @Html.Raw(Model.ColData.Replace("<div target=\"editor\">", "").Replace("</div>", ""));
                }
            }
        </textarea>
      @*  <script>

            editorId = "editor_"+"@Model.ColNumber"+"_"+"@ViewBag.RowNumber";
           
             
            
             CKEDITOR.replace(editorId, config);
             CKEDITOR.dtd.$removeEmpty['i'] = false;
             CKEDITOR.dtd.$removeEmpty['span'] = false;
        </script>*@
        <button class="btn btn-success bg-gradient btn-sm float-end btnHtmlSanitizer m-1" onclick="sinitize(this);" editorid='@($"editor_{Model.ColNumber}_{ViewBag.RowNumber}")' cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section"
                type="button">
            @Language.GetString("btn_Validation")
        </button>
    </div>
    <div class="row finalColumnContent d-none" classNames="@Model.ColumnClassNames" guid="@Model.RowGuid" cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section" >
        @{
            if (contentType != "")
            {
                @Model.ColData;
            }
        }
    </div>
    <div class="row htmlColumnContentPreview d-none mx-2" classNames="@Model.ColumnClassNames" guid="@Model.RowGuid" cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section">
        @{
            if(contentType != "")
            {
                if(contentType == "editor")
                {
                    @Model.ColData.Replace("<div target=\"editor\">", "").Replace("</div>", "");
                }else
                {
                     switch (module.ModuleName)
                                {
                                    case "ProductList":
                                         @await Component.InvokeAsync("SpecialProduct",
                                        new { productType = module.ParametersValue.ProductOrContentType,
                                        selectionTemplate = module.ParametersValue.ProductTemplateDesign, count = module.ParametersValue.Count,
                                        loadAnimation = module.ParametersValue.LoadAnimation, loadAnimationType = module.ParametersValue.LoadAnimationType } );
                                        break;
                                    case "ContentList":
                                        @await Component.InvokeAsync("ContentTemplates", new { contentType = module.ParametersValue.ProductOrContentType,
                                        selectionTemplate = module.ParametersValue.ContentTemplateDesign ,  count = module.ParametersValue.Count,
                                        loadAnimation = module.ParametersValue.LoadAnimation, loadAnimationType = module.ParametersValue.LoadAnimationType });
                                        break;
                                    case "HorizantalStoreMenu":
                                        @await Component.InvokeAsync("StoreMenuModule")
                                        ;
                                        break;
                                    case "ImageTextSlider":
                                        @await Component.InvokeAsync("Slider", new { sliderId =  module.ParametersValue.SliderId })
                                        ;
                                        break;
                                    case "LoginAndProfile":
                                        @await Component.InvokeAsync("LoginProfile", new { domainId = module.ParametersValue.DomainId, isShop = module.ParametersValue.IsShop })
                                        ;
                                        break;
                                    case "MultiLingualFlags":
                                        @await Component.InvokeAsync("MultiLingual")
                                        ;
                                        break;

                                }
                }
            }
           
        }
    </div>

    @*difference between these finalColumnContent and htmlColumnContentPreview is about modules the first one store with parameters and second one render html of executed module*@
    @*difference between moduleDatePreview and htmlColumnContentPreview is if we have more than one module in a column then mouleDataPreview is for the last module to show but htmlColumnContentPreview is all data of this columns*@
    <div class="row moduleDataPreview mx-2 @(contentType != "" && contentType == "module" ? "" : "d-none")" guid="@Model.RowGuid" cn="@Model.ColNumber" rn="@ViewBag.RowNumber" sec="@Model.Section">
        @{
            if (contentType != "" && contentType == "module")
            {
                switch (module.ModuleName)
                                {
                                    case "ProductList":
                                        @await Component.InvokeAsync("SpecialProduct",
                                        new { productType = module.ParametersValue.ProductOrContentType,
                                        selectionTemplate = module.ParametersValue.ProductTemplateDesign, count = module.ParametersValue.Count,
                                        loadAnimation = module.ParametersValue.LoadAnimation, loadAnimationType = module.ParametersValue.LoadAnimationType } );
                                        break;
                                    case "ContentList":
                                        @await Component.InvokeAsync("ContentTemplates", new { contentType = module.ParametersValue.ProductOrContentType,
                                        selectionTemplate = module.ParametersValue.ContentTemplateDesign ,  count = module.ParametersValue.Count,
                                        loadAnimation = module.ParametersValue.LoadAnimation, loadAnimationType = module.ParametersValue.LoadAnimationType });
                                        break;
                                    case "HorizantalStoreMenu":
                                        @await Component.InvokeAsync("StoreMenuModule");
                                        break;
                                    case "ImageTextSlider":
                                        @await Component.InvokeAsync("Slider", new { sliderId =  module.ParametersValue.SliderId });
                                        break;
                                    case "LoginAndProfile":
                                        @await Component.InvokeAsync("LoginProfile", new { domainId = module.ParametersValue.DomainId, isShop = module.ParametersValue.IsShop });
                                        break;
                                    case "MultiLingualFlags":
                                        @await Component.InvokeAsync("MultiLingual");
                                        break;

                                }
            }
        }
    </div>
</div>


<script>
    $(document).ready(function()
    {
        //alert("@ViewBag.RowNumber");
        //if('@contentType' != "")
        //{
        //    loadData();
        //}

    });


    //function loadData()
    //{
    //    debugger;
          
    //        debugger;
    //        if('@contentType' == "module")
    //        {
    //            $('.moduleList[cn="@Model.ColNumber"][rn="@ViewBag.RowNumber"][sec="@Model.Section"]').selectpicker("val","@module.ModuleId");
                

    //            debugger;
    //            var sender = $('.btnAddModule[cn="@Model.ColNumber"][rn="@ViewBag.RowNumber"][sec="@Model.Section"]');
    //            var parentDiv = $(sender).closest(".parent");
    //            var colnumber =  $(sender).attr("cn");
    //            var cnt = $(sender).closest(`div[colnum='${colnumber}']`).attr("cnt");
    //            var selectedModuleName = $(parentDiv).find(".moduleList").find("option:selected").text();
    //            var selectedModuleId = $(parentDiv).find(".moduleList").find("option:selected").val();
    //            var paramDiv = $(parentDiv).find(".paramsDiv");
    //            debugger;
    //            $.ajax({
    //                url:"@Url.Action("GetSpecificModule","Domain")"+
    //                  "?moduleName="+'@module.ModuleName'+"&id="+'@ViewBag.DomainId'+"&colCount="+cnt +"&rn=" +"@ViewBag.RowNumber"+"&cn="+"@Model.ColNumber"+"&sec="+"@Model.Section",
    //                type:'Get',
    //                statusCode:{
    //                    200:function(data){
    //                        $(paramDiv).html(data);
    //                        $(".typeList").selectpicker();
    //                        var sender;
    //                        switch('@module.ModuleName')
    //                        {
    //                            case "ProductList":
    //                             $("input[name='rdbProductTemplateList'][value='@module.ParametersValue.ProductTemplateDesign'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").attr("checked", "checked");

    //                             $("[parid='typeList'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").selectpicker("val","@module.ParametersValue.ProductOrContentType");
                                

    //                             $("[parid='countToShow'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").val("@module.ParametersValue.Count");

    //                             $("[parid='loadAnimation'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").selectpicker("val", "@module.ParametersValue.LoadAnimation");
                                

    //                             $("[parid='loadAnimationType'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").selectpicker("val", "@module.ParametersValue.LoadAnimationType")
                                

    //                            break;
    //                            case "ContentList":

    //                            $("input[name='rdbContentTemplateList'][value='@module.ParametersValue.ProductTemplateDesign'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").attr("checked", "checked");

    //                             $("[parid='typeList'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").selectpicker("val", "@module.ParametersValue.ProductOrContentType");
                                

    //                             if(!$(".countSection[cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").hasClass("d-none"))
    //                             {
    //                                 $("[parid='countToShow'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").val("@module.ParametersValue.Count");
    //                             }

    //                             $("[parid='loadAnimation'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").selectpicker("val", "@module.ParametersValue.LoadAnimation");
                                 

    //                             $("[parid='loadAnimationType'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").selectpicker("val", "@module.ParametersValue.LoadAnimationType");
                                 
    //                            break;
    //                            case "HorizantalStoreMenu":
    //                            break;
    //                            case "ImageTextSlider":
    //                            $("[parid='sliderList'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").selectpicker("val", "@module.ParametersValue.SliderId");
                                
    //                            break;
    //                            case "LoginAndProfile":
    //                            if('@module.ParametersValue.IsShop' == "True")
    //                            {
    //                                $("[parid='isShop'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']").attr("checked", "checked");
    //                            }
    //                            break;
    //                            case "MultiLingualFlags":
    //                            break;
    //                        }

    //                        sender = $("[btnid='btnAddModuleWithParameters'][cn='@Model.ColNumber'][rn='@ViewBag.RowNumber'][sec='@Model.Section']");
    //                        addModulesWithParams(sender);

    //                    }
    //                }
    //            });
    //        }
    //}

             

</script>
